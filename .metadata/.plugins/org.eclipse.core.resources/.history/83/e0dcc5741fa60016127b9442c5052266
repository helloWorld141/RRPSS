package Application;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;

/**
 * @author Nguyen Dang Duy Nghia
 *
 */
public class Order implements Serializable{
	/**
	 * id of the order
	 */
	private int orderID;
	/**
	 * id of the staff who made this order
	 */
	private int staffID;
	/**
	 * id of the table associated with this order
	 */
	private int tableID;
	/**
	 * total price of the order
	 */
	private int totalPrice;
	/**
	 * when the order is made
	 */
	private LocalDateTime timeStamp;
	/**
	 * store all items that are ordered
	 */
	private ArrayList<MenuItem> menuItemsOrder;
	/**
	 * store all packages that are ordered
	 */
	private ArrayList<PromotionalPackage> promotionalPackageOrder;
	/**
	 * whether it the order is paid or not
	 */
	private boolean paid;
	
	/**
	 * constructor
	 * @param orderID
	 * @param staffID
	 * @param tableID
	 * @param timeStamp
	 * @param itemsOrder
	 * @param packageOrder
	 */
	Order(int orderID, int staffID, int tableID, LocalDateTime timeStamp, ArrayList<MenuItem> itemsOrder, ArrayList<PromotionalPackage> packageOrder){
		this.orderID = orderID;
		this.staffID = staffID;
		this.tableID = tableID;
		this.timeStamp = timeStamp;
		this.menuItemsOrder = itemsOrder;
		this.promotionalPackageOrder = packageOrder;
		this.paid = false;
		this.totalPrice = 0;
		for (MenuItem item:menuItemsOrder){
			this.totalPrice += item.getPrice();
		}
		for (PromotionalPackage packagee:promotionalPackageOrder){
			this.totalPrice += packagee.getPackagePrice();
		}
	}
	/**
	 * get the id of the order
	 * @return
	 */
	public int getOrderID(){
		return this.orderID;
	}
	/**
	 * get the time when the order is made
	 * @return
	 */
	public LocalDateTime when(){
		return this.timeStamp;
	}
	/**
	 * get the table's id that associate with this order
	 * @return
	 */
	public int getTableID(){
		return this.tableID;
	}
	/**
	 * indicate that this order is already paid
	 */
	public void pay(){
		this.paid = true;
	}
	/**
	 * check whether this orer is paid or not
	 * @return
	 */
	public boolean isPaid(){
		return this.paid;
	}
	/**
	 * get the total price of this order
	 * @return
	 */
	public double getTotalPrice(){
		return this.totalPrice;
	}
	/**
	 * add menu items to this order
	 * @param toAdd
	 */
	public void addMenuItem(MenuItem toAdd){
		this.menuItemsOrder.add(toAdd);
	}
	/**
	 * add multiple menu items into this order
	 * @param items
	 */
	public void addMenuItems(ArrayList<MenuItem> items){
		for (MenuItem item:items){
			addMenuItem(item);
		}
	}
	/**
	 * add a package to this order
	 * @param toAdd
	 */
	public void addPromotionalPackage(PromotionalPackage toAdd){
		this.promotionalPackageOrder.add(toAdd);
	}
	/**
	 * add multiple packages to this order
	 * @param packages
	 */
	public void addPromotionalPackges(ArrayList<PromotionalPackage> packages){
		for (PromotionalPackage packagee:packages){
			addPromotionalPackage(packagee);
		}
	}
	/**
	 * remove multiple items from order according to their itemID
	 * @param itemIDs
	 */
	public void removeItems(ArrayList<String> itemIDs){
		for(int i =0;i<menuItemsOrder.size();i++){
			if (itemIDs.contains(menuItemsOrder.get(i).getID())){
				menuItemsOrder.remove(i);
			}
		}
	}
	/**
	 * remove multiple packages from this order according to their packageID
	 * @param packageIDs
	 */
	public void removePackages(ArrayList<Integer> packageIDs){
		for(int i =0;i<promotionalPackageOrder.size();i++){
			if (packageIDs.contains(promotionalPackageOrder.get(i).getID())){
				promotionalPackageOrder.remove(i);
			}
		}
	}
	/**
	 * check if an item is in this order
	 * @param id
	 * @return
	 */
	public boolean isItemValid(String id){
		for (MenuItem item : menuItemsOrder){
			if (item.getID().equals(id)) return true;
		}
		return false;
	}
	/**
	 * check if a package is in this order
	 * @param id
	 * @return
	 */
	public boolean isPackageValid(int id){
		for (PromotionalPackage packagee : promotionalPackageOrder){
			if (packagee.getID() == id) return true;
		}
		return false;
	}
	/**
	 * format to print this order in revenue report
	 * @return
	 */
	public String forReport(){
		//TODO
		// what to print for each entry in the report
		return new String();
	}
	/**
	 * the header of the order when printed out to the console
	 * @return
	 */
	public String info(){
		String d = "|";
		return "Order "+orderID+d+"Staff "+staffID+d+"Table "+tableID+d+"Price "+totalPrice;
	}
	/**
	 * use to print this order when payment is made
	 */
	public void printOrderInvoice(){
		System.out.println(this);
	}	
	@Override
	public String toString(){
		//what to print in order invoice
		String d = "\n";
		String res = "Order "+orderID+d+"List of items and packages:";
		for (MenuItem item:menuItemsOrder){
			res = res.concat(d+item.toString());
		}
		for (PromotionalPackage packagee:promotionalPackageOrder){
			res = res.concat(d+packagee.toString());
		}
		res = res.concat(d+"Subtotal:" + String.valueOf(totalPrice));
		res = res.concat(d+)
		
		return (res);
	}
}
