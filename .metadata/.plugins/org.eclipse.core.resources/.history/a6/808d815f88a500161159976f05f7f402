package Application;
import java.util.*;
import Helper.IOHandler;

import java.io.*;

public class Menu implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private TreeMap<String, ArrayList<MenuItem>> menuItemList;
	private ArrayList<PromotionalPackage> promotionalPackageList;
	
	/*
	private ArrayList<MenuItem> mainCourse;
	private ArrayList<MenuItem> drinks;
	private ArrayList<MenuItem> desserts;
	*/
	public Menu(){
		promotionalPackageList = new ArrayList<PromotionalPackage>();
		menuItemList = new TreeMap<String, ArrayList<MenuItem>>();
		menuItemList.put("main", new ArrayList<MenuItem>());
		menuItemList.put("drinks", new ArrayList<MenuItem>());
		menuItemList.put("desserts", new ArrayList<MenuItem>());
		promotionalPackageList = (ArrayList) IOHandler.readSerializedObject("PromoPackages.db");
		ArrayList<MenuItem> items = (ArrayList) IOHandler.readSerializedObject("Items.db");
		for (int i=0; i<items.size();i++){
			switch (items.get(i).getID().charAt(0)){
			case '1':
				menuItemList.get("main").add(items.get(i));
				break;
			case '2':
				menuItemList.get("drinks").add(items.get(i));
				break;
			case '3':
				menuItemList.get("desserts").add(items.get(i));
				break;
			}
		}
		System.out.println(menuItemList);
		System.out.println(promotionalPackageList);
	}
	
	public void updateItemName(String ID, String newName){
		char type = ID.charAt(0);
		String courseType = CourseType.values()[type-49].toString();
		for(int i=0;i<menuItemList.get(courseType).size();i++){
			if (menuItemList.get(courseType).get(i).getID().equals(ID)){
				menuItemList.get(courseType).get(i).setName(newName);
				break;
			}
		}
	}
	public void updateItemPrice(String ID, double newPrice){
		char type = ID.charAt(0);
		String courseType = CourseType.values()[type-49].toString();
		for(int i=0;i<menuItemList.get(courseType).size();i++){
			if (menuItemList.get(courseType).get(i).getID().equals(ID)){
				menuItemList.get(courseType).get(i).setPrice(newPrice);
				break;
			}
		}
	}
	/**
	 * change the description of an item in ala carte list
	 * 
	 */
	public void updateItemDescription(String ID, String newDescription){
		char type = ID.charAt(0);
		String courseType = CourseType.values()[type-49].toString();
		for(int i=0;i<menuItemList.get(courseType).size();i++){
			if (menuItemList.get(courseType).get(i).getID().equals(ID)){
				menuItemList.get(courseType).get(i).setDescription(newDescription);
				break;
			}
		}
	}
	/**
	 * create new menu item in ala carte list
	 * @param type
	 * @param name
	 * @param description
	 * @param price
	 */
	public void createMenuItem(int type, String name, String description, double price){
		CourseType courseType = CourseType.values()[type-1];
		String ID = Integer.valueOf(type).toString();
		ID = ID.concat(Integer.valueOf(menuItemList.get(courseType.toString()).size()).toString());
		menuItemList.get(courseType.toString()).add(new MenuItem(ID , courseType, name, description, price));
		System.out.println(menuItemList.get("main"));
	}
	/**
	 * remove item from menu if ID is valid. ignore if ID is not valild
	 * @param ID
	 */
	public void removeMenuItem(String ID){
		char type = ID.charAt(0);
		int i=0;
		String courseType = CourseType.values()[type-49].toString();
		for(i=0;i<menuItemList.get(courseType).size();i++){
			if (menuItemList.get(courseType).get(i).getID().equals(ID)){
				menuItemList.get(courseType).remove(i);
				break;
			}
		}
		
		for (;i<menuItemList.get(courseType).size();i++){
			Integer newID = Integer.getInteger(menuItemList.get(courseType).get(i).getID())-1;
			menuItemList.get(courseType).get(i).setID(newID.toString());
		}
	}
	/**
	 * create new promotional package with name and price
	 * @param name
	 * @param price
	 */
	public void createPromotionalPackage(String name, double price){
		int id = promotionalPackageList.size();
		promotionalPackageList.add(new PromotionalPackage(id, name, price));
	}
	/**
	 * remove an existing promotional package. ignore if packageNo is invalid
	 * @param packageNo
	 */
	public void removePromotionalPackage(int packageNo){
		if (isValid(packageNo)){
			promotionalPackageList.remove(packageNo);
			for (int i=packageNo; i<promotionalPackageList.size(); i++){
				promotionalPackageList.get(i).setID(i);
			}
		}
	}
	/**
	 * change the name of a package. the existence of the package and item are guaranteed 
	 * @param packageNo
	 * @param newName
	 */
	public void updatePackageName(int packageNo, String newName){
		promotionalPackageList.get(packageNo).setPackageName(newName);
	}
	/**
	 * change the price of a package. the existence of the package and item are guaranteed 
	 * @param packageNo
	 * @param newPrice
	 */
	public void updatePackagePrice(int packageNo, double newPrice){
		promotionalPackageList.get(packageNo).setPackagePrice(newPrice);
	}
	/**
	 * add new item to an existing package. the existence of the package and item are guaranteed 
	 * @param packageNo
	 * @param itemID
	 */
	public void addItemToPackage(int packageNo, String itemID){
		char type = itemID.charAt(0);
		String courseType = CourseType.values()[type-49].toString();
		for(int i=0;i<menuItemList.get(courseType).size();i++){
			if (menuItemList.get(courseType).get(i).getID().equals(itemID)){
				promotionalPackageList.get(packageNo).addItem(menuItemList.get(courseType).get(i));
				break;
			}
		}
	}
	/**
	 * add a list of items into an existing package. the existence of the package and item are guaranteed
	 * @param packageNo
	 * @param itemIDs
	 * @param newPrice
	 */
	public void addItemsToPackage(int packageNo, ArrayList<String> itemIDs, double newPrice){
		for (int i=0; i<itemIDs.size(); i++){
			addItemToPackage(packageNo, itemIDs.get(i));
		}
		updatePackagePrice(packageNo, newPrice);
	}
	/**
	 * remove an item from an existing package. the existence of the package and item are guaranteed 
	 * @param packageNo
	 * @param itemID
	 */
	public void removeItemFromPackage(int packageNo, String itemID){
		promotionalPackageList.get(packageNo).removeItem(itemID);
	}
	/**
	 * remove a list of items from an existing package. the existence of the package and item are guaranteed
	 * @param packageNo
	 * @param itemIDs
	 * @param newPrice
	 */
	public void removeItemsFromPackage(int packageNo, ArrayList<String> itemIDs, double newPrice){
		for (int i=0; i<itemIDs.size(); i++){
			removeItemFromPackage(packageNo, itemIDs.get(i));
		}
		updatePackagePrice(packageNo, newPrice);
	}
	/**
	 * get a menu item using its ID. return null if no iteme is found
	 * @param itemID
	 * @return
	 */
	public MenuItem getMenuItem(String itemID){
		char type = itemID.charAt(0);
		String courseType = CourseType.values()[type-49].toString();
		for(int i=0;i<menuItemList.get(courseType).size();i++){
			if (menuItemList.get(courseType).get(i).getID().equals(itemID)){
				return menuItemList.get(courseType).get(i);
			}
		}
		return null;
	}
	/**
	 * get a promotional package using its id. return null if no package is found
	 * @param packageNo
	 * @return
	 */
	public PromotionalPackage getPackage(int packageNo){
		try {
			return promotionalPackageList.get(packageNo);
		} catch (ArrayIndexOutOfBoundsException e){
			return null;
		}
	}
	/**
	 * print all items in ala carte list
	 */
	public void viewMenuItem(){
		System.out.println("\n+ Main Course:");
		ArrayList<MenuItem> list = menuItemList.get("main");
		for (int i=0;i<list.size();i++){
			System.out.println(list.get(i));
		}
		System.out.println("\n+ Drinks:");
		list = menuItemList.get("drinks");
		for (int i=0;i<list.size();i++){
			System.out.println(list.get(i));
		}
		System.out.println("\n+ Desserts:");
		list = menuItemList.get("desserts");
		for (int i=0;i<list.size();i++){
			System.out.println(list.get(i));
		}
	}
	/**
	 * print all promotional packages
	 */
	public void viewPackages(){
		System.out.println("\n+ Promotional packages:");
		for (int i=0;i<promotionalPackageList.size();i++){
			System.out.println(promotionalPackageList.get(i));
		}
	}
	/**
	 * print all items from a promotional package. the existence of the package is guaranteed
	 * @param packageNo
	 */
	public void viewItemsFromPackage(int packageNo){
		System.out.println("Package contains: ");
		ArrayList<MenuItem> items = promotionalPackageList.get(packageNo).getitemList();
		for (MenuItem item:items){
			System.out.println(item);
		}
	}
	/**
	 * check if a menu item id exist
	 * @param itemID
	 * @return
	 */
	public boolean isValid(String itemID){
		return !(getMenuItem(itemID) == null);
	}
	/**
	 * check if a package id exist
	 * @param packageID
	 * @return
	 */
	public boolean isValid(int packageID){
		return !(getPackage(packageID) == null);
	}
	/**
	 * save data back into files
	 */
	public void cleanUp(){
		IOHandler.writeSerializedObject("PromoPackages.db", promotionalPackageList);
		ArrayList<MenuItem> list = new ArrayList<MenuItem>();
		list.addAll(menuItemList.get("main"));
		list.addAll(menuItemList.get("drinks"));
		list.addAll(menuItemList.get("desserts"));
		IOHandler.writeSerializedObject("Items.db", list);
	}
}
