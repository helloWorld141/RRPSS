package Application;

import java.util.*;

import Helper.IOHandler;
import Helper.TimeHandler;

import java.io.*;
import java.time.LocalDateTime;

/**
 * @author Nguyen Dang Duy Nghia
 *
 */
public class TablesManager {
	/**
	 * stored all talbes
	 */
	private ArrayList<Table> tableList;

	public TablesManager() {
		tableList = new ArrayList<Table>();
		tableList = (ArrayList) IOHandler.readSerializedObject("Tables.db");
		System.out.println(tableList);
	}

	public ArrayList<Table> getAvailTables(Reserve reserve) {
		ArrayList<Table> availTables = new ArrayList<Table>();
		for (Table table : tableList)
			if (isAvail(table.getTableID(), reserve))
				availTables.add(table);
		return availTables;
	}

	public void showAvailableTables(Reserve reserve) {
		System.out.println(getAvailTables(reserve));
	}

	public boolean isAvail(int tableID, Reserve reserve) {
		if (tableID < 0 || tableID > 29)
			return false;
		Table table = tableList.get(tableID);
		ArrayList<Reservation> reservations = reserve.getReservations(table.getReservationIDs());
		LocalDateTime now = LocalDateTime.now();
		for (Reservation reservation : reservations) {
			if (now.toLocalDate().equals(reservation.getTime().toLocalDate()))
				if (TimeHandler.whatSession(reservation.getTime().toLocalTime())
						.equals(TimeHandler.whatSession(now.toLocalTime())))
					return false;
		}
		return tableList.get(tableID).getStatus().equals(TableStatus.vacated);
	}

	public void setStatus(int tableID, TableStatus status) {
		tableList.get(tableID).setStatus(status);
	}

	public void reserve(int tableID) {
		setStatus(tableID, TableStatus.reserved);
	}

	public void release(int tableID, String reservationID) {
		setStatus(tableID, TableStatus.vacated);
		tableList.get(tableID).removeReservation(reservationID);
	}

	public void cleanUp() {
		IOHandler.writeSerializedObject("Tables.db", tableList);
	}
}
